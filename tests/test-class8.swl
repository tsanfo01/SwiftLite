func gcd(a : Int, b : Int) -> Int {
    if (b == 0) {
        return a;
    }
    var x : Int = a % b;
    return gcd(b, x);
}

func lcm (a : Int, b : Int) -> Int {
    return (a / gcd(a, b)) * b;
}

class Fraction {
    var num : Int;
    var den : Int;

    init(num : Int, den : Int) {
        if den < 0 {
            self.den = -den;
            self.num = -num;
        } else {
            self.num = num;
            self.den = den;
        }
    }

    func setNum(num1 : Int) -> Int {
        num = num1;
        return 0;
    }
    func setDen(den1 : Int) -> Int {
        den = den1;
        return 0;
    }

    func getNum() -> Int {
        return self.num;
    }
    func getDen() -> Int {
        return self.den;
    }

    func negate() -> Fraction {
        num = -num;
        return self;
    }

    func reduce() -> Fraction {
        if num == 0 {
            self.den = 1;
        } else {
            var tmp : Int = gcd(num, den);

            self.num = num / tmp;
            self.den = den / tmp;
        }
        return self;
    }

    func print() -> Int {
        printi(num);
        print("/");
        printi(den);
    }
}

func addFrac(x : Fraction, y : Fraction) -> Fraction {
    var numx : Int = x.getNum();
    var denx : Int = x.getDen();
    var numy : Int = y.getNum();
    var deny : Int = y.getDen();

    var lcd : Int = lcm(deny, denx);

    var tmp : Int = ((lcd / deny) * numy) + ((lcd / denx) * numx);

    var frac : Fraction = Fraction(tmp, lcd);

    return frac.reduce();
}

func subFrac(x : Fraction, y : Fraction) -> Fraction {
    return addFrac(x, y.negate());
}

var x : Fraction = addFrac(Fraction(5, 3), Fraction(6, 3));
var y : Fraction = subFrac(x, Fraction(1, 1));

x.print();
y.print();
