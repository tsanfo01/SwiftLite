type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | COMMA
  | SEMI
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | NOT
  | AND
  | OR
  | ASSIGN
  | ORANGE
  | CRANGE
  | LET
  | VAR
  | IN
  | IF
  | ELSE
  | FOR
  | WHILE
  | RETURN
  | INT
  | FLOAT
  | CHAR
  | STRING
  | BOOL
  | OPTIONAL
  | NIL
  | COLON
  | DOT
  | CLASS
  | INIT
  | SELF
  | FUNC
  | ARROW
  | ENUM
  | CASE
  | BOOLLIT of (bool)
  | INTLIT of (int)
  | CHARLIT of (char)
  | FLOATLIT of (float)
  | STRINGLIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 64 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LBRACKET *);
  262 (* RBRACKET *);
  263 (* COMMA *);
  264 (* SEMI *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* MOD *);
  270 (* EQ *);
  271 (* NEQ *);
  272 (* LT *);
  273 (* LEQ *);
  274 (* GT *);
  275 (* GEQ *);
  276 (* NOT *);
  277 (* AND *);
  278 (* OR *);
  279 (* ASSIGN *);
  280 (* ORANGE *);
  281 (* CRANGE *);
  282 (* LET *);
  283 (* VAR *);
  284 (* IN *);
  285 (* IF *);
  286 (* ELSE *);
  287 (* FOR *);
  288 (* WHILE *);
  289 (* RETURN *);
  290 (* INT *);
  291 (* FLOAT *);
  292 (* CHAR *);
  293 (* STRING *);
  294 (* BOOL *);
  295 (* OPTIONAL *);
  296 (* NIL *);
  297 (* COLON *);
  298 (* DOT *);
  299 (* CLASS *);
  300 (* INIT *);
  301 (* SELF *);
  302 (* FUNC *);
  303 (* ARROW *);
  304 (* ENUM *);
  305 (* CASE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  306 (* BOOLLIT *);
  307 (* INTLIT *);
  308 (* CHARLIT *);
  309 (* FLOATLIT *);
  310 (* STRINGLIT *);
  311 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\003\000\004\000\
\005\000\007\000\007\000\014\000\014\000\010\000\010\000\015\000\
\015\000\016\000\016\000\011\000\011\000\012\000\012\000\018\000\
\018\000\013\000\013\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\009\000\009\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\020\000\020\000\020\000\021\000\
\021\000\019\000\019\000\022\000\022\000\023\000\023\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\025\000\025\000\
\026\000\026\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\002\000\010\000\007\000\
\005\000\000\000\001\000\003\000\005\000\000\000\001\000\006\000\
\007\000\000\000\002\000\007\000\008\000\000\000\001\000\001\000\
\002\000\003\000\004\000\001\000\001\000\001\000\001\000\001\000\
\002\000\001\000\003\000\000\000\002\000\002\000\007\000\007\000\
\003\000\001\000\005\000\007\000\005\000\006\000\011\000\004\000\
\002\000\000\000\001\000\000\000\001\000\001\000\003\000\001\000\
\001\000\001\000\001\000\001\000\005\000\003\000\000\000\001\000\
\001\000\003\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\003\000\003\000\004\000\
\006\000\004\000\006\000\003\000\001\000\003\000\006\000\005\000\
\004\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\098\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\000\059\000\058\000\060\000\057\000\
\000\000\001\000\003\000\004\000\005\000\006\000\000\000\042\000\
\067\000\000\000\065\000\000\000\000\000\084\000\085\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\038\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000\000\
\036\000\041\000\000\000\028\000\030\000\031\000\032\000\029\000\
\034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\071\000\072\000\
\073\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\097\000\000\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\090\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\036\000\043\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\
\000\000\095\000\000\000\000\000\000\000\026\000\000\000\091\000\
\000\000\040\000\039\000\000\000\036\000\049\000\044\000\000\000\
\000\000\000\000\008\000\025\000\000\000\000\000\000\000\027\000\
\036\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\000\000\048\000\000\000\016\000\036\000\000\000\000\000\
\000\000\000\000\000\000\036\000\017\000\007\000\047\000\020\000\
\000\000\021\000"

let yydgoto = "\002\000\
\003\000\004\000\027\000\028\000\029\000\146\000\133\000\090\000\
\122\000\128\000\152\000\175\000\136\000\134\000\129\000\204\000\
\031\000\176\000\047\000\032\000\169\000\096\000\097\000\033\000\
\036\000\037\000"

let yysindex = "\021\000\
\000\000\000\000\000\000\038\000\040\001\034\255\040\001\040\001\
\219\254\245\254\022\001\015\255\040\001\040\001\030\255\021\255\
\035\255\043\255\044\255\000\000\000\000\000\000\000\000\000\000\
\068\255\000\000\000\000\000\000\000\000\000\000\046\003\000\000\
\000\000\048\002\000\000\109\255\117\255\000\000\000\000\089\255\
\094\255\081\255\215\002\118\255\238\002\121\003\139\255\045\255\
\146\255\099\255\152\255\154\255\040\001\040\001\103\255\040\001\
\000\000\040\001\040\001\040\001\040\001\040\001\040\001\040\001\
\040\001\040\001\040\001\040\001\040\001\040\001\040\001\040\001\
\121\255\122\255\034\255\045\255\045\255\123\255\000\000\040\001\
\000\000\000\000\045\255\000\000\000\000\000\000\000\000\000\000\
\000\000\126\255\140\255\012\255\113\255\127\255\121\003\164\255\
\172\255\159\003\180\255\067\003\116\255\116\255\000\000\000\000\
\000\000\210\003\210\003\131\255\131\255\131\255\131\255\193\003\
\176\003\131\255\131\255\000\000\045\255\000\000\248\254\250\254\
\045\255\151\255\005\003\189\255\004\255\000\000\130\255\142\255\
\160\255\040\001\040\001\156\255\190\255\188\255\145\255\003\255\
\000\000\040\001\040\001\191\255\126\255\040\001\040\001\006\255\
\193\255\000\000\000\000\000\000\000\000\176\255\218\255\077\255\
\169\255\223\255\159\003\045\255\179\255\173\255\222\255\000\000\
\192\255\121\003\229\255\040\001\085\003\103\003\040\001\008\255\
\000\000\075\000\045\255\113\255\244\255\000\000\242\255\202\255\
\208\255\000\000\126\255\045\255\209\255\000\000\245\255\000\000\
\159\003\000\000\000\000\028\003\000\000\000\000\000\000\007\255\
\002\000\113\255\000\000\000\000\045\255\002\255\045\255\000\000\
\000\000\112\000\040\001\004\000\006\000\008\000\007\255\000\000\
\126\255\149\000\000\000\121\003\000\000\000\000\010\000\009\000\
\186\000\193\255\223\000\000\000\000\000\000\000\000\000\000\000\
\004\001\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\253\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\018\000\000\000\000\000\
\094\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\118\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\142\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\166\001\241\255\190\001\033\000\000\000\017\255\000\000\
\034\000\111\255\214\001\000\000\087\255\030\002\000\000\000\000\
\000\000\249\255\145\003\072\002\096\002\120\002\144\002\167\255\
\205\255\168\002\192\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\250\255\014\000\000\000\000\000\000\000\035\000\000\000\000\000\
\000\000\000\000\014\000\238\001\006\002\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\000\000\230\255\000\000\000\000\000\000\000\000\000\000\
\000\000\018\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\000\000\000\000\000\000\041\000\
\000\000\000\000\019\255\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\000\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\040\255\000\000\000\000\049\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\120\255\000\000\000\000\038\001\098\255\207\255\
\187\255\000\000\000\000\000\000\000\000\000\000\000\000\108\000\
\251\255\000\000\000\000\148\000\099\000\149\255\000\000\254\255\
\000\000\000\000"

let yytablesize = 1259
let yytable = "\034\000\
\045\000\038\000\039\000\035\000\208\000\043\000\160\000\045\000\
\046\000\149\000\189\000\124\000\130\000\193\000\142\000\174\000\
\143\000\040\000\054\000\055\000\012\000\001\000\154\000\054\000\
\055\000\012\000\119\000\120\000\167\000\203\000\126\000\163\000\
\126\000\125\000\131\000\206\000\011\000\026\000\006\000\196\000\
\126\000\013\000\126\000\041\000\126\000\126\000\013\000\095\000\
\098\000\083\000\100\000\161\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\141\000\053\000\044\000\048\000\144\000\
\118\000\015\000\123\000\049\000\050\000\170\000\084\000\085\000\
\086\000\087\000\088\000\020\000\021\000\022\000\023\000\024\000\
\069\000\069\000\054\000\069\000\069\000\069\000\069\000\069\000\
\069\000\051\000\052\000\089\000\069\000\069\000\069\000\069\000\
\069\000\069\000\179\000\069\000\069\000\055\000\069\000\069\000\
\087\000\087\000\074\000\087\000\087\000\087\000\087\000\202\000\
\173\000\192\000\018\000\075\000\095\000\155\000\060\000\061\000\
\062\000\076\000\198\000\210\000\162\000\095\000\077\000\078\000\
\165\000\166\000\217\000\058\000\059\000\060\000\061\000\062\000\
\219\000\080\000\082\000\207\000\091\000\209\000\225\000\005\000\
\093\000\092\000\145\000\006\000\094\000\099\000\185\000\116\000\
\007\000\188\000\117\000\121\000\126\000\137\000\127\000\132\000\
\080\000\080\000\008\000\080\000\080\000\080\000\080\000\135\000\
\009\000\010\000\138\000\011\000\139\000\012\000\013\000\014\000\
\150\000\151\000\153\000\080\000\080\000\005\000\015\000\157\000\
\148\000\006\000\158\000\017\000\156\000\212\000\007\000\159\000\
\020\000\021\000\022\000\023\000\024\000\025\000\081\000\081\000\
\008\000\081\000\081\000\081\000\081\000\164\000\009\000\010\000\
\171\000\011\000\172\000\012\000\013\000\014\000\168\000\177\000\
\178\000\180\000\081\000\181\000\015\000\182\000\184\000\096\000\
\096\000\017\000\096\000\096\000\096\000\096\000\020\000\021\000\
\022\000\023\000\024\000\025\000\194\000\195\000\183\000\018\000\
\197\000\199\000\074\000\074\000\200\000\074\000\074\000\074\000\
\074\000\045\000\063\000\205\000\045\000\045\000\074\000\074\000\
\214\000\215\000\045\000\213\000\220\000\074\000\074\000\052\000\
\221\000\064\000\089\000\089\000\045\000\089\000\089\000\089\000\
\089\000\050\000\045\000\045\000\014\000\045\000\051\000\045\000\
\045\000\045\000\010\000\053\000\011\000\015\000\005\000\022\000\
\045\000\030\000\006\000\045\000\023\000\045\000\045\000\007\000\
\045\000\018\000\045\000\045\000\045\000\045\000\045\000\045\000\
\019\000\008\000\216\000\190\000\223\000\000\000\000\000\009\000\
\010\000\000\000\011\000\000\000\012\000\013\000\014\000\000\000\
\000\000\000\000\000\000\005\000\000\000\015\000\191\000\006\000\
\016\000\000\000\017\000\018\000\007\000\019\000\000\000\020\000\
\021\000\022\000\023\000\024\000\025\000\000\000\008\000\000\000\
\000\000\000\000\000\000\000\000\009\000\010\000\000\000\011\000\
\000\000\012\000\013\000\014\000\000\000\000\000\000\000\000\000\
\005\000\000\000\015\000\211\000\006\000\000\000\000\000\017\000\
\000\000\007\000\000\000\000\000\020\000\021\000\022\000\023\000\
\024\000\025\000\000\000\008\000\000\000\000\000\000\000\000\000\
\000\000\009\000\010\000\000\000\011\000\000\000\012\000\013\000\
\014\000\000\000\000\000\000\000\000\000\005\000\000\000\015\000\
\218\000\006\000\000\000\000\000\017\000\000\000\007\000\000\000\
\000\000\020\000\021\000\022\000\023\000\024\000\025\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\009\000\010\000\
\000\000\011\000\000\000\012\000\013\000\014\000\000\000\000\000\
\000\000\000\000\005\000\000\000\015\000\222\000\006\000\000\000\
\000\000\017\000\000\000\007\000\000\000\000\000\020\000\021\000\
\022\000\023\000\024\000\025\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\009\000\010\000\000\000\011\000\000\000\
\012\000\013\000\014\000\000\000\000\000\000\000\000\000\005\000\
\000\000\015\000\224\000\006\000\000\000\000\000\017\000\000\000\
\007\000\000\000\000\000\020\000\021\000\022\000\023\000\024\000\
\025\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\009\000\010\000\000\000\011\000\000\000\012\000\013\000\014\000\
\000\000\000\000\000\000\000\000\005\000\000\000\015\000\226\000\
\006\000\000\000\000\000\017\000\000\000\007\000\000\000\000\000\
\020\000\021\000\022\000\023\000\024\000\025\000\005\000\008\000\
\000\000\000\000\006\000\000\000\000\000\009\000\010\000\007\000\
\011\000\000\000\012\000\013\000\014\000\000\000\000\000\000\000\
\005\000\008\000\000\000\015\000\006\000\000\000\000\000\042\000\
\017\000\007\000\000\000\000\000\000\000\020\000\021\000\022\000\
\023\000\024\000\025\000\008\000\000\000\015\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\000\000\020\000\
\021\000\022\000\023\000\024\000\025\000\000\000\000\000\015\000\
\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\020\000\021\000\022\000\023\000\024\000\025\000\093\000\
\093\000\000\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\000\000\093\000\093\000\000\000\093\000\093\000\068\000\
\068\000\000\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\000\000\068\000\068\000\000\000\068\000\068\000\086\000\
\086\000\000\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\000\000\086\000\086\000\000\000\086\000\086\000\062\000\
\062\000\000\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\000\000\062\000\062\000\000\000\062\000\062\000\094\000\
\094\000\000\000\094\000\094\000\094\000\094\000\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
\094\000\000\000\094\000\094\000\000\000\094\000\094\000\092\000\
\092\000\000\000\092\000\092\000\092\000\092\000\092\000\092\000\
\092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
\092\000\000\000\092\000\092\000\000\000\092\000\092\000\088\000\
\088\000\000\000\088\000\088\000\088\000\088\000\088\000\088\000\
\088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
\088\000\000\000\088\000\088\000\000\000\088\000\088\000\061\000\
\061\000\000\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\000\000\061\000\061\000\000\000\061\000\061\000\070\000\
\070\000\000\000\070\000\070\000\070\000\070\000\070\000\070\000\
\000\000\000\000\000\000\070\000\070\000\070\000\070\000\070\000\
\070\000\073\000\070\000\070\000\056\000\070\000\070\000\000\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\000\000\069\000\070\000\000\000\071\000\
\072\000\076\000\076\000\000\000\076\000\076\000\076\000\076\000\
\000\000\000\000\000\000\000\000\000\000\076\000\076\000\076\000\
\076\000\076\000\076\000\000\000\076\000\076\000\000\000\076\000\
\076\000\077\000\077\000\000\000\077\000\077\000\077\000\077\000\
\000\000\000\000\000\000\000\000\000\000\077\000\077\000\077\000\
\077\000\077\000\077\000\000\000\077\000\077\000\000\000\077\000\
\077\000\078\000\078\000\000\000\078\000\078\000\078\000\078\000\
\000\000\000\000\000\000\000\000\000\000\078\000\078\000\078\000\
\078\000\078\000\078\000\000\000\078\000\078\000\000\000\078\000\
\078\000\079\000\079\000\000\000\079\000\079\000\079\000\079\000\
\000\000\000\000\000\000\000\000\000\000\079\000\079\000\079\000\
\079\000\079\000\079\000\000\000\079\000\079\000\000\000\079\000\
\079\000\082\000\082\000\000\000\082\000\082\000\082\000\082\000\
\000\000\000\000\000\000\000\000\000\000\082\000\082\000\082\000\
\082\000\082\000\082\000\000\000\082\000\082\000\000\000\082\000\
\082\000\083\000\083\000\000\000\083\000\083\000\083\000\083\000\
\000\000\000\000\000\000\000\000\000\000\083\000\083\000\083\000\
\083\000\083\000\083\000\000\000\083\000\083\000\000\000\083\000\
\083\000\079\000\000\000\056\000\000\000\000\000\000\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\000\000\069\000\070\000\000\000\071\000\072\000\
\081\000\000\000\056\000\000\000\000\000\000\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\000\000\069\000\070\000\000\000\071\000\072\000\147\000\
\000\000\056\000\000\000\000\000\000\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\000\000\069\000\070\000\000\000\071\000\072\000\201\000\000\000\
\056\000\000\000\000\000\000\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\000\000\
\069\000\070\000\056\000\071\000\072\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\000\000\069\000\070\000\000\000\071\000\072\000\056\000\
\140\000\000\000\000\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\000\000\069\000\
\070\000\056\000\071\000\072\000\186\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\000\000\069\000\070\000\056\000\071\000\072\000\187\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\000\000\069\000\070\000\056\000\071\000\072\000\
\000\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\000\000\069\000\070\000\000\000\
\071\000\072\000\075\000\075\000\000\000\075\000\075\000\075\000\
\075\000\000\000\000\000\000\000\000\000\000\000\075\000\075\000\
\000\000\000\000\000\000\000\000\000\000\075\000\075\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\000\000\069\000\070\000\000\000\071\000\072\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\000\000\069\000\000\000\000\000\071\000\
\072\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\000\000\000\000\000\000\000\000\
\071\000\072\000\058\000\059\000\060\000\061\000\062\000\000\000\
\000\000\065\000\066\000\067\000\068\000\000\000\000\000\000\000\
\000\000\071\000\072\000"

let yycheck = "\005\000\
\000\000\007\000\008\000\006\000\003\001\011\000\004\001\013\000\
\014\000\006\001\003\001\081\000\001\001\172\000\023\001\152\000\
\023\001\055\001\002\001\002\001\002\001\001\000\130\000\007\001\
\007\001\007\001\076\000\077\000\023\001\023\001\039\001\139\000\
\039\001\083\000\023\001\194\000\029\001\000\000\005\001\176\000\
\039\001\002\001\039\001\055\001\039\001\039\001\007\001\053\000\
\054\000\005\001\056\000\049\001\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\117\000\001\001\055\001\041\001\121\000\
\075\000\040\001\080\000\055\001\042\001\147\000\034\001\035\001\
\036\001\037\001\038\001\050\001\051\001\052\001\053\001\054\001\
\002\001\003\001\023\001\005\001\006\001\007\001\008\001\009\001\
\010\001\055\001\055\001\055\001\014\001\015\001\016\001\017\001\
\018\001\019\001\156\000\021\001\022\001\042\001\024\001\025\001\
\002\001\003\001\006\001\005\001\006\001\007\001\008\001\189\000\
\044\001\171\000\046\001\007\001\130\000\131\000\011\001\012\001\
\013\001\041\001\180\000\201\000\138\000\139\000\041\001\055\001\
\142\000\143\000\208\000\009\001\010\001\011\001\012\001\013\001\
\214\000\028\001\008\001\197\000\003\001\199\000\220\000\001\001\
\001\001\055\001\004\001\005\001\003\001\055\001\164\000\039\001\
\010\001\167\000\041\001\041\001\039\001\002\001\027\001\055\001\
\002\001\003\001\020\001\005\001\006\001\007\001\008\001\049\001\
\026\001\027\001\007\001\029\001\001\001\031\001\032\001\033\001\
\055\001\044\001\027\001\021\001\022\001\001\001\040\001\002\001\
\004\001\005\001\007\001\045\001\041\001\203\000\010\001\055\001\
\050\001\051\001\052\001\053\001\054\001\055\001\002\001\003\001\
\020\001\005\001\006\001\007\001\008\001\023\001\026\001\027\001\
\041\001\029\001\001\001\031\001\032\001\033\001\030\001\055\001\
\002\001\047\001\022\001\055\001\040\001\008\001\002\001\002\001\
\003\001\045\001\005\001\006\001\007\001\008\001\050\001\051\001\
\052\001\053\001\054\001\055\001\001\001\004\001\055\001\046\001\
\041\001\041\001\002\001\003\001\008\001\005\001\006\001\007\001\
\008\001\001\001\006\001\002\001\004\001\005\001\014\001\015\001\
\003\001\002\001\010\001\008\001\003\001\021\001\022\001\002\001\
\008\001\006\001\002\001\003\001\020\001\005\001\006\001\007\001\
\008\001\008\001\026\001\027\001\044\001\029\001\008\001\031\001\
\032\001\033\001\002\001\002\001\002\001\044\001\001\001\004\001\
\040\001\004\000\005\001\043\001\004\001\045\001\046\001\010\001\
\048\001\008\001\050\001\051\001\052\001\053\001\054\001\055\001\
\008\001\020\001\207\000\168\000\218\000\255\255\255\255\026\001\
\027\001\255\255\029\001\255\255\031\001\032\001\033\001\255\255\
\255\255\255\255\255\255\001\001\255\255\040\001\004\001\005\001\
\043\001\255\255\045\001\046\001\010\001\048\001\255\255\050\001\
\051\001\052\001\053\001\054\001\055\001\255\255\020\001\255\255\
\255\255\255\255\255\255\255\255\026\001\027\001\255\255\029\001\
\255\255\031\001\032\001\033\001\255\255\255\255\255\255\255\255\
\001\001\255\255\040\001\004\001\005\001\255\255\255\255\045\001\
\255\255\010\001\255\255\255\255\050\001\051\001\052\001\053\001\
\054\001\055\001\255\255\020\001\255\255\255\255\255\255\255\255\
\255\255\026\001\027\001\255\255\029\001\255\255\031\001\032\001\
\033\001\255\255\255\255\255\255\255\255\001\001\255\255\040\001\
\004\001\005\001\255\255\255\255\045\001\255\255\010\001\255\255\
\255\255\050\001\051\001\052\001\053\001\054\001\055\001\255\255\
\020\001\255\255\255\255\255\255\255\255\255\255\026\001\027\001\
\255\255\029\001\255\255\031\001\032\001\033\001\255\255\255\255\
\255\255\255\255\001\001\255\255\040\001\004\001\005\001\255\255\
\255\255\045\001\255\255\010\001\255\255\255\255\050\001\051\001\
\052\001\053\001\054\001\055\001\255\255\020\001\255\255\255\255\
\255\255\255\255\255\255\026\001\027\001\255\255\029\001\255\255\
\031\001\032\001\033\001\255\255\255\255\255\255\255\255\001\001\
\255\255\040\001\004\001\005\001\255\255\255\255\045\001\255\255\
\010\001\255\255\255\255\050\001\051\001\052\001\053\001\054\001\
\055\001\255\255\020\001\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\255\255\029\001\255\255\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\001\001\255\255\040\001\004\001\
\005\001\255\255\255\255\045\001\255\255\010\001\255\255\255\255\
\050\001\051\001\052\001\053\001\054\001\055\001\001\001\020\001\
\255\255\255\255\005\001\255\255\255\255\026\001\027\001\010\001\
\029\001\255\255\031\001\032\001\033\001\255\255\255\255\255\255\
\001\001\020\001\255\255\040\001\005\001\255\255\255\255\026\001\
\045\001\010\001\255\255\255\255\255\255\050\001\051\001\052\001\
\053\001\054\001\055\001\020\001\255\255\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\255\255\255\255\255\255\050\001\
\051\001\052\001\053\001\054\001\055\001\255\255\255\255\040\001\
\255\255\255\255\255\255\255\255\045\001\255\255\255\255\255\255\
\255\255\050\001\051\001\052\001\053\001\054\001\055\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\024\001\025\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\024\001\025\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\024\001\025\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\024\001\025\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\024\001\025\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\024\001\025\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\024\001\025\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\024\001\025\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\255\255\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\002\001\021\001\022\001\005\001\024\001\025\001\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\255\255\024\001\
\025\001\002\001\003\001\255\255\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\255\255\024\001\
\025\001\002\001\003\001\255\255\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\255\255\024\001\
\025\001\002\001\003\001\255\255\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\255\255\024\001\
\025\001\002\001\003\001\255\255\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\255\255\024\001\
\025\001\002\001\003\001\255\255\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\255\255\024\001\
\025\001\002\001\003\001\255\255\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\255\255\024\001\
\025\001\003\001\255\255\005\001\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\255\255\024\001\025\001\
\003\001\255\255\005\001\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\024\001\025\001\003\001\
\255\255\005\001\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\255\255\024\001\025\001\003\001\255\255\
\005\001\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\022\001\005\001\024\001\025\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\024\001\025\001\005\001\
\006\001\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\022\001\005\001\024\001\025\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\005\001\024\001\025\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\005\001\024\001\025\001\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\255\255\
\024\001\025\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\255\255\024\001\025\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\255\255\255\255\024\001\
\025\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\255\255\255\255\
\024\001\025\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\255\255\255\255\255\255\
\255\255\024\001\025\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  COMMA\000\
  SEMI\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  NOT\000\
  AND\000\
  OR\000\
  ASSIGN\000\
  ORANGE\000\
  CRANGE\000\
  LET\000\
  VAR\000\
  IN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  RETURN\000\
  INT\000\
  FLOAT\000\
  CHAR\000\
  STRING\000\
  BOOL\000\
  OPTIONAL\000\
  NIL\000\
  COLON\000\
  DOT\000\
  CLASS\000\
  INIT\000\
  SELF\000\
  FUNC\000\
  ARROW\000\
  ENUM\000\
  CASE\000\
  EOF\000\
  "

let yynames_block = "\
  BOOLLIT\000\
  INTLIT\000\
  CHARLIT\000\
  FLOATLIT\000\
  STRINGLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'defns) in
    Obj.repr(
# 40 "parser.mly"
            ( List.rev _1 )
# 652 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
                  ( [] )
# 658 "parser.ml"
               : 'defns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'defns) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdefn) in
    Obj.repr(
# 44 "parser.mly"
                ( Func_defn(_2)::_1 )
# 666 "parser.ml"
               : 'defns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'defns) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cdefn) in
    Obj.repr(
# 45 "parser.mly"
                ( Cls_defn(_2)::_1  )
# 674 "parser.ml"
               : 'defns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'defns) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'edefn) in
    Obj.repr(
# 46 "parser.mly"
                ( Enum_defn(_2)::_1 )
# 682 "parser.ml"
               : 'defns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'defns) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 47 "parser.mly"
                ( Stmt(_2)::_1      )
# 690 "parser.ml"
               : 'defns))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'args_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 51 "parser.mly"
                                                                   (
    { fname = _2; params = List.rev _4; ty = _7; body = List.rev _9 }
  )
# 702 "parser.ml"
               : 'fdefn))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'fields_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'init_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'methods_opt) in
    Obj.repr(
# 56 "parser.mly"
                                                           (
    { cname = _2; fields = List.rev _4; inits = List.rev _5; methods = List.rev _6}
  )
# 714 "parser.ml"
               : 'cdefn))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'case_list) in
    Obj.repr(
# 61 "parser.mly"
                                  (
    { ename = _2; cases = List.rev _4 }
  )
# 724 "parser.ml"
               : 'edefn))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                  ( [] )
# 730 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 67 "parser.mly"
                  ( _1 )
# 737 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 70 "parser.mly"
                                 ( [(_1, _3)]   )
# 745 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 71 "parser.mly"
                                 ( (_3, _5)::_1 )
# 754 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
                  ( [] )
# 760 "parser.ml"
               : 'fields_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fields_list) in
    Obj.repr(
# 75 "parser.mly"
                  ( _1 )
# 767 "parser.ml"
               : 'fields_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assign_opt) in
    Obj.repr(
# 78 "parser.mly"
                                                 ( [(_2, _4, _5)]   )
# 776 "parser.ml"
               : 'fields_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'fields_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assign_opt) in
    Obj.repr(
# 79 "parser.mly"
                                                 ( (_3, _5, _6)::_1 )
# 786 "parser.ml"
               : 'fields_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                  ( NoExpr )
# 792 "parser.ml"
               : 'assign_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                  ( _2     )
# 799 "parser.ml"
               : 'assign_opt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'args_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 86 "parser.mly"
                                                                  ( [(_3, _6)]     )
# 807 "parser.ml"
               : 'init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'init_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'args_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 87 "parser.mly"
                                                                  ( (_4, _7)::_1 )
# 816 "parser.ml"
               : 'init_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
                  ( [] )
# 822 "parser.ml"
               : 'methods_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'methods_list) in
    Obj.repr(
# 91 "parser.mly"
                  ( _1 )
# 829 "parser.ml"
               : 'methods_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdefn) in
    Obj.repr(
# 94 "parser.mly"
                       ( [_1]   )
# 836 "parser.ml"
               : 'methods_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'methods_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdefn) in
    Obj.repr(
# 95 "parser.mly"
                       ( _2::_1 )
# 844 "parser.ml"
               : 'methods_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 98 "parser.mly"
                           ( [_2]   )
# 851 "parser.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'case_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 99 "parser.mly"
                           ( _3::_1 )
# 859 "parser.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
                          ( Int          )
# 865 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
                          ( Bool         )
# 871 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                          ( Float        )
# 877 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
                          ( Char         )
# 883 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
                          ( String       )
# 889 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 107 "parser.mly"
                          ( Optional(_1) )
# 896 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "parser.mly"
                          ( UserDef(_1)  )
# 903 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 109 "parser.mly"
                          ( Array(_2)    )
# 910 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                ( [] )
# 916 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 113 "parser.mly"
                   ( _2 :: _1 )
# 924 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                                        (Expr _1)
# 931 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                                        (Var(_2,_4,_6))
# 940 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                                        (Let(_2,_4,_6))
# 949 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 119 "parser.mly"
                                        (Return _2)
# 956 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cond) in
    Obj.repr(
# 120 "parser.mly"
                                        ( _1 )
# 963 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 121 "parser.mly"
                                       (While(_2, List.rev _4))
# 971 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 122 "parser.mly"
                                           (For(_2, _4, List.rev _6))
# 980 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 124 "parser.mly"
                                                 (If(_2, List.rev _4, []))
# 988 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'else_branch) in
    Obj.repr(
# 125 "parser.mly"
                                                (If(_2, List.rev _4, List.rev _6))
# 997 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'typ) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'else_branch) in
    Obj.repr(
# 126 "parser.mly"
                                                                        (IfLet(_3,_5,_7, List.rev _9, List.rev _11))
# 1008 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 129 "parser.mly"
                                 ( _3 )
# 1015 "parser.ml"
               : 'else_branch))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cond) in
    Obj.repr(
# 130 "parser.mly"
              ( [_2] )
# 1022 "parser.ml"
               : 'else_branch))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
                  ( NoExpr )
# 1028 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                  ( _1 )
# 1035 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
                  ( [] )
# 1041 "parser.ml"
               : 'expr_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 138 "parser.mly"
                  ( List.rev _1 )
# 1048 "parser.ml"
               : 'expr_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                   ( [_1]     )
# 1055 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                         ( _3 :: _1 )
# 1063 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 145 "parser.mly"
                              ( BoolLit(_1)          )
# 1070 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 146 "parser.mly"
                              ( StringLit(_1)        )
# 1077 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 147 "parser.mly"
                              ( CharLit(_1)          )
# 1084 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 148 "parser.mly"
                              ( IntLit(_1)           )
# 1091 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 149 "parser.mly"
                              ( FloatLit(_1)         )
# 1098 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'lit_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 150 "parser.mly"
                                        ( ArrayLit (_5, List.rev _2) )
# 1106 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 151 "parser.mly"
                              ( Nil(_3)              )
# 1113 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
                  ( [] )
# 1119 "parser.ml"
               : 'lit_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lit_list) in
    Obj.repr(
# 155 "parser.mly"
                  ( _1 )
# 1126 "parser.ml"
               : 'lit_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 158 "parser.mly"
                           ( [_1]     )
# 1133 "parser.ml"
               : 'lit_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lit_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 159 "parser.mly"
                           ( _3 :: _1 )
# 1141 "parser.ml"
               : 'lit_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 162 "parser.mly"
                     ( Literal _1             )
# 1148 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 163 "parser.mly"
                     ( Id(_1)                 )
# 1155 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                     ( Binop(_1, Add,   _3)   )
# 1163 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
                     ( Binop(_1, Sub,   _3)   )
# 1171 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                     ( Binop(_1, Mul,  _3)   )
# 1179 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
                     ( Binop(_1, Div,   _3)   )
# 1187 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                     ( Binop(_1, Mod,   _3)   )
# 1195 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                     ( Binop(_1, Eq,    _3)   )
# 1203 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
                     ( Binop(_1, Neq,   _3)   )
# 1211 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                     ( Binop(_1, Lt,    _3)   )
# 1219 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                     ( Binop(_1, Leq,   _3)   )
# 1227 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
                     ( Binop(_1, Gt,    _3)   )
# 1235 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                     ( Binop(_1, Geq,   _3)   )
# 1243 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                     ( Binop(_1, And,   _3)   )
# 1251 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "parser.mly"
                     ( Binop(_1, Or,    _3)   )
# 1259 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                     ( Binop(_1, Orange, _3)  )
# 1267 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                     ( Binop(_1, Crange, _3)  )
# 1275 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                         ( Unop(Neg, _2)      )
# 1282 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                     ( Unop(Not, _2)          )
# 1289 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
                       ( _2 )
# 1296 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                     ( Assign(_1, _3)         )
# 1304 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                                (ArrAt(_1,_3))
# 1312 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 184 "parser.mly"
                                            (ArrAssign(_1,_3,_6))
# 1321 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_opt) in
    Obj.repr(
# 185 "parser.mly"
                                   (Call(_1, _3))
# 1329 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_opt) in
    Obj.repr(
# 186 "parser.mly"
                                          (MethodCall(_1,_3,_5))
# 1338 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 187 "parser.mly"
               (EnumCase(_1,_3))
# 1346 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "parser.mly"
            ( Self )
# 1352 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 189 "parser.mly"
                ( SelfField(_3) )
# 1359 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_opt) in
    Obj.repr(
# 190 "parser.mly"
                                            ( SelfCall(_3, _5) )
# 1367 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 191 "parser.mly"
                            ( SelfAssign(_3, _5) )
# 1375 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 192 "parser.mly"
                                ( Opt(_2) )
# 1382 "parser.ml"
               : 'expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
