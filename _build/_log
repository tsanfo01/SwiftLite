### Starting build.
# Target: toplevel.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:toplevel.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules toplevel.ml > toplevel.ml.depends
# Target: ast.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules ast.ml > ast.ml.depends
# Target: codegen.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:codegen.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules codegen.ml > codegen.ml.depends
# Target: ast.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o ast.cmo ast.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o ast.cmo ast.ml
File "ast.ml", lines 117-125, characters 25-44:
117 | .........................function
118 |     Int -> "Int"
119 |   | Float -> "Float"
120 |   | Char -> "Char"
121 |   | String -> "String"
122 |   | Bool -> "Bool"
123 |   | Optional(t) -> string_of_type t ^ "?"
124 |   | UserDef(s) -> s
125 |   | Array(t) -> "[" ^ string_of_type t ^ "]"
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Any
# Target: sast.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:sast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules sast.ml > sast.ml.depends
# Target: sast.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o sast.cmo sast.ml
# Target: parser.mly, tags: { package(llvm), package(llvm.analysis), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
/Users/timsanford/.opam/4.11.1/bin/ocamlyacc parser.mly
# Target: parser.mli.depends, tags: { package(llvm), package(llvm.analysis), extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules parser.mli > parser.mli.depends
# Target: scanner.mll, tags: { package(llvm), package(llvm.analysis), extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, quiet }
/Users/timsanford/.opam/4.11.1/bin/ocamllex.opt -q scanner.mll
# Target: scanner.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:scanner.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules scanner.ml > scanner.ml.depends
# Target: parser.cmi, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o parser.cmi parser.mli
# Target: semant.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:semant.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules semant.ml > semant.ml.depends
# Target: codegen.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
File "codegen.ml", lines 23-31, characters 22-29:
23 | ......................function
24 |       A.Int   -> i32_t
25 |     | A.Bool  -> i1_t
26 |     | A.Char -> i8_t
27 |     | A.String -> L.pointer_type i8_t
28 |     | A.Float -> float_t
29 |     | A.Optional _ -> raise ToDo
30 |     | A.UserDef _ -> raise ToDo
31 |     | A.Array _ -> raise ToDo
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Any
File "codegen.ml", line 101, characters 12-13:
101 |           | _ -> raise ToDo
                  ^
Warning 11: this match case is unused.
# Target: scanner.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:scanner.cmo, file:scanner.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o scanner.cmo scanner.ml
# Target: semant.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:semant.cmo, file:semant.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o semant.cmo semant.ml
# Target: toplevel.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:toplevel.cmo, file:toplevel.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o toplevel.cmo toplevel.ml
# Target: ast.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o ast.cmx ast.ml
+ ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o ast.cmx ast.ml
File "ast.ml", lines 117-125, characters 25-44:
117 | .........................function
118 |     Int -> "Int"
119 |   | Float -> "Float"
120 |   | Char -> "Char"
121 |   | String -> "String"
122 |   | Bool -> "Bool"
123 |   | Optional(t) -> string_of_type t ^ "?"
124 |   | UserDef(s) -> s
125 |   | Array(t) -> "[" ^ string_of_type t ^ "]"
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Any
# Target: sast.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:sast.cmx, file:sast.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o sast.cmx sast.ml
# Target: parser.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o parser.cmx parser.ml
# Target: codegen.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:codegen.cmx, file:codegen.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o codegen.cmx codegen.ml
+ ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o codegen.cmx codegen.ml
File "codegen.ml", lines 23-31, characters 22-29:
23 | ......................function
24 |       A.Int   -> i32_t
25 |     | A.Bool  -> i1_t
26 |     | A.Char -> i8_t
27 |     | A.String -> L.pointer_type i8_t
28 |     | A.Float -> float_t
29 |     | A.Optional _ -> raise ToDo
30 |     | A.UserDef _ -> raise ToDo
31 |     | A.Array _ -> raise ToDo
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Any
File "codegen.ml", line 101, characters 12-13:
101 |           | _ -> raise ToDo
                  ^
Warning 11: this match case is unused.
# Target: scanner.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:scanner.cmx, file:scanner.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o scanner.cmx scanner.ml
# Target: semant.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:semant.cmx, file:semant.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o semant.cmx semant.ml
# Target: toplevel.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:toplevel.cmx, file:toplevel.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.analysis -package llvm -o toplevel.cmx toplevel.ml
# Target: toplevel.native, tags: { package(llvm), package(llvm.analysis), dont_link_with, extension:native, file:toplevel.native, link, native, ocaml, program, quiet }
ocamlfind ocamlopt -linkpkg -package llvm.analysis -package llvm ast.cmx sast.cmx codegen.cmx parser.cmx scanner.cmx semant.cmx toplevel.cmx -o toplevel.native
# Compilation successful.
